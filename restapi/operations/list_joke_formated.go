// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ListJokeFormatedHandlerFunc turns a function with the right signature into a list joke formated handler
type ListJokeFormatedHandlerFunc func(ListJokeFormatedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListJokeFormatedHandlerFunc) Handle(params ListJokeFormatedParams) middleware.Responder {
	return fn(params)
}

// ListJokeFormatedHandler interface for that can handle valid list joke formated params
type ListJokeFormatedHandler interface {
	Handle(ListJokeFormatedParams) middleware.Responder
}

// NewListJokeFormated creates a new http.Handler for the list joke formated operation
func NewListJokeFormated(ctx *middleware.Context, handler ListJokeFormatedHandler) *ListJokeFormated {
	return &ListJokeFormated{Context: ctx, Handler: handler}
}

/*ListJokeFormated swagger:route GET / listJokeFormated

Display joke for random person

Returns joke for individual person.

*/
type ListJokeFormated struct {
	Context *middleware.Context
	Handler ListJokeFormatedHandler
}

func (o *ListJokeFormated) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListJokeFormatedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
